Integrating with GIT for team management

storing your configuration files locally is not always an idea specifically in the scenario were other members of the team are also working on Terraform.

For such cases, it is important to store your Terraorm code to a centralized repository like in Git.

 Module Sources in Terraform

The source argument in a module block tells Terraform where to find the source code for the desired child module.

Local paths
Terraform Registry
GitHub
Bitbucket
Generic Git, Mercurial repositories
HTTP URLs
S3 buckets
GCS buckets

Let us explore some of the supported module sources.
Local Path

A local path must begin with either ./ or ../ to indicate that a local path is intended.
Git Module Source


Arbitrary Git repositories can be used by prefixing the address with the special git:: prefix. 

After this prefix, any valid Git URL can be specified to select one of the protocols supported by Git.

Referencing to a Branch

By default, Terraform will clone and use the default branch (referenced by HEAD) in the selected repository. 

You can override this using the ref argument:
The value of the ref argument can be any reference that would be accepted by the git checkout command, including branch and tag names.
 Terraform & GitIgnore

The .gitignore file is a text file that tells Git which files or folders to ignore in a project.

Depending on the environment, it is recommended to avoid committing certain files to GIT.
.terraform
.terraform.tfvars
terraform.tfstate
crash.log

Terraform Backend

4.1 Basics of Backends

Backends primarily determine where Terraform stores its state.

By default, Terraform implicitly uses a backend called local to store state as a local file on disk.
Challenge with Local Backend

Nowadays Terraform projects are handled and collaborated by an entire team.

Storing the state file in the local laptop will not allow collaboration.
deal Architecture

Following describes one of the recommended architectures:

The Terraform Code is stored in Git Repository.
The State file is stored in a Central backend.
Backends Supported in Terraform

Terraform supports multiple backends that allow remote service related operations.

Some of the popular backends include:

S3
Consul
Azurerm
Kubernetes
HTTP
ETCD
Important Note

Accessing state in a remote service generally requires some kind of access credentials

Some backends act like plain "remote disks" for state files; others support locking the state while operations are being performed, which helps prevent conflicts and inconsistencies.

State File Locking
Understanding State Lock

Whenever you are performing write operation, terraform would lock the state file.

This is very important as otherwise during your ongoing terraform apply operations, if others also try for the same, it can corrupt your state file.
Important Note

State locking happens automatically on all operations that could write state. You won't see any message that it is happening

If state locking fails, Terraform will not continue

Not all backends support locking. The documentation for each backend includes details on whether it supports locking or not.
Force Unlocking State

Terraform has a force-unlock command to manually unlock the state if unlocking failed.

If you unlock the state when someone else is holding the lock it could cause multiple writers. 

Force unlock should only be used to unlock your own lock in the situation where automatic unlocking failed.
State Locking in S3 Backend

By default, S3 does not support State Locking functionality.

You need to make use of the DynamoDB table to achieve state locking functionality. 
Terraform State Management

As your Terraform usage becomes more advanced, there are some cases where you may need to modify the Terraform state.

It is important to never modify the state file directly. Instead, make use of terraform state command.

There are multiple sub-commands that can be used with terraform state, these include:
list
mv
pull
push
rm
show
Sub Command - List

The terraform state list command is used to list resources within a Terraform state.

terraform state list
Sub Command - Move

The terraform state mv command is used to move items in a Terraform state.

This command is used in many cases in which you want to rename an existing resource without destroying and recreating it.
Due to the destructive nature of this command, this command will output a backup copy of the state prior to saving any changes

Overall Syntax:

terraform state mv [options] SOURCE DESTINATION
Sub Command - Pull

The terraform state pull command is used to manually download and output the state from a remote state.

This is useful for reading values out of state (potentially pairing this command with something like jq).
Sub Command - Push

The terraform state push command is used to manually upload a local state file to remote state.


This command should rarely be used.
Sub Command - Remove

The terraform state rm command is used to remove items from the Terraform state.

Items removed from the Terraform state are not physically destroyed. 

Items removed from the Terraform state are only no longer managed by Terraform

For example, if you remove an AWS instance from the state, the AWS instance will continue running, but terraform plan will no longer see that instance.
Sub Command - Show

The terraform state show command is used to show the attributes of a single resource in the Terraform state.

 Connecting Remote States
 Basics of Terraform Remote State

The terraform_remote_state data source retrieves the root module output values from some other Terraform configuration, using the latest state snapshot from the remote backend

Terraform Import

It might happen that there is a resource that is already created manually.

In such a case, any change you want to make to that resource must be done manually.
Terraform is able to import existing infrastructure. This allows you to take resources you've created by some other means and bring it under Terraform management.

The current implementation of Terraform import can only import resources into the state. It does not generate configuration. A future version of Terraform will also generate configuration.

Because of this, prior to running terraform import it is necessary to write manually a resource configuration block for the resource, to which the imported object will be mapped.
